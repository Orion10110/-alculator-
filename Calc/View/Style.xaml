<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:Calc.View">
    <Style TargetType="Button">
        <!--<Setter Property="FontFamily" Value="Verdana" />-->
        <Style.Setters>
        <Setter Property="Background" Value="Black" />
        <Setter Property="Foreground" Value="White" />
        <!--<Setter Property="Margin" Value="5,5,0,0" />-->
        <Setter Property="Width" Value="25"/>
        <Setter Property="Height" Value="35"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Grid Width="{TemplateBinding Width}" 
     Height="{TemplateBinding Height}" ClipToBounds="True">

                            <!-- Outer Rectangle. -->
                            <Rectangle x:Name="outerRectangle" 
        HorizontalAlignment="Stretch" 
        VerticalAlignment="Stretch" 
        Stroke="{TemplateBinding Background}" 
      
        Fill="Transparent" />

                            <!-- Inner Rectangle-->
                            <Rectangle x:Name="innerRectangle" 
        HorizontalAlignment="Stretch" 
        VerticalAlignment="Stretch" Stroke="Transparent" 
        StrokeThickness="5" 
        Fill="{TemplateBinding Background}" 
         />

                            <!-- Present Content (text) of the button. -->
                            <DockPanel Name="myContentPresenterDockPanel">
                                <ContentPresenter x:Name="myContentPresenter" HorizontalAlignment="Center" VerticalAlignment="Center"
          Content="{TemplateBinding  Content}" 
          TextBlock.Foreground="{TemplateBinding  Foreground}" />
                            </DockPanel>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <!-- Set properties when mouse pointer is over the button. -->
                            <Trigger Property="IsMouseOver" Value="True">

                           
                                <!-- Change the color of the outer rectangle when user 
         mouses over it. -->
                                <Setter Property ="Rectangle.Stroke" TargetName="outerRectangle"
      Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                                <Setter Property ="Rectangle.Stroke" TargetName="innerRectangle"
      Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />


                                <!-- Makes the text slightly blurry as though you 
         were looking at it through blurry glass. -->
                                <Setter Property="ContentPresenter.BitmapEffect" 
      TargetName="myContentPresenter">
                                    <Setter.Value>
                                        <BlurBitmapEffect Radius="1" />
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                            <!--<EventTrigger RoutedEvent="Button.Click">
                                <EventTrigger.Actions>
                                    <BeginStoryboard>
                                        <Storyboard>

                                            --><!-- This animation makes the glass rectangle shrink in the X direction. --><!--
                                            <DoubleAnimation Storyboard.TargetName="glassCube" 
          Storyboard.TargetProperty=
          "(Rectangle.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"
          By="-0.1" Duration="0:0:0.5" />

                                            --><!-- This animation makes the glass rectangle shrink in the Y direction. --><!--
                                            <DoubleAnimation
        Storyboard.TargetName="glassCube" 
          Storyboard.TargetProperty=
          "(Rectangle.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" 
          By="-0.1" Duration="0:0:0.5" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </EventTrigger.Actions>
                            </EventTrigger>-->
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                   
                </Setter.Value>
            </Setter>
        </Style.Setters>
        
    </Style>
    <Style x:Key="ValB" TargetType="Button">
        <Setter Property="Content" Value="&#xE1A4;"/>
    </Style>
</ResourceDictionary>